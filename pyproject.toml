[build-system]
requires = ["setuptools>=64.0", "wheel"]
build-backend = "setuptools.build_meta"


[project]
# See this for settings: https://packaging.python.org/en/latest/specifications/declaring-project-metadata/
name = "pyBL"
version = "0.5.5"
authors = [
    {name = "David D. Marshall", email = "ddmarshall@gmail.com"},
    {name = "Malachi Edland"},
]
description = "Integral boundary layer method implementations for use with inviscid flow solvers."
readme = "README.rst"
requires-python = ">=3.8"
license = {file = "license.md"}
keywords = ["Integral Boundary Layer Methods", "Aerodynamics", "Viscous Flow"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering"
]
dependencies = [
    "numpy>=1.20",
    "scipy>=1.8"
]


[project.urls]
documentation = "https://ddmarshall.github.io/IBL/index.html"
repository = "https://github.com/ddmarshall/IBL"


[project.optional-dependencies]
examples = ["matplotlib>=3.5"]
tests = [
    "pylint>=2.15",
    "mypy>=0.991",
    "pycodestyle>=2.10",
    "coverage>=7.2"
]


[tool.setuptools]
packages=["pyBL"]


[tools.setuptools.package-data]
stanford_olympics = ["stanford_olypics/*.txt"]


[tool.pylint.main]
fail-under = 10.0
ignore = ["CVS"]
ignore-patterns = ["^\\.#"]
jobs = 1
limit-inference-results = 100
persistent = true
py-version = "3.9"
suggestion-mode = true


[tool.pylint.basic]
argument-naming-style = "snake_case"
attr-naming-style = "snake_case"
bad-names = ["foo", "bar", "baz", "toto", "tutu", "tata"]
class-attribute-naming-style = "any"
class-const-naming-style = "UPPER_CASE"
class-naming-style = "PascalCase"
const-naming-style = "UPPER_CASE"
docstring-min-length = -1
function-naming-style = "snake_case"
good-names = ["ex", "Run", "_"]
good-names-rgxs = ["^[_a-z][_a-z0-9]?$"]
inlinevar-naming-style = "any"
method-naming-style = "snake_case"
module-naming-style = "snake_case"
no-docstring-rgx = "^_"
property-classes = ["abc.abstractproperty"]
variable-naming-style = "snake_case"


[tool.pylint.classes]
defining-attr-methods = ["__init__", "__new__", "setUp", "__post_init__"]
exclude-protected = ["_asdict", "_fields", "_replace", "_source", "_make"]
valid-classmethod-first-arg = ["cls"]
valid-metaclass-classmethod-first-arg = ["cls"]


[tool.pylint.design]
max-args = 10
max-attributes = 20
max-bool-expr = 5
max-branches = 12
max-locals = 20
max-parents = 7
max-public-methods = 20
max-returns = 6
max-statements = 50
min-public-methods = 1


[tool.pylint.format]
ignore-long-lines = "^\\s*(# )?<?https?://\\S+>?$"
indent-after-paren = 4
indent-string = "    "
max-line-length = 79
max-module-lines = 1000


[tool.pylint.imports]
known-third-party = ["enchant"]


[tool.pylint.logging]
logging-format-style = "old"
logging-modules = ["logging"]


[tool.pylint."messages control"]
# Only show warnings with the listed confidence levels. Leave empty to show all.
# Valid levels: HIGH, CONTROL_FLOW, INFERENCE, INFERENCE_FAILURE, UNDEFINED.
confidence = []
disable = ["raw-checker-failed", "bad-inline-option", "locally-disabled", "file-ignored", "suppressed-message", "useless-suppression", "deprecated-pragma", "use-symbolic-message-instead"]
enable = ["c-extension-no-member"]


[tool.pylint.method_args]
timeout-methods = ["requests.api.delete", "requests.api.get", "requests.api.head", "requests.api.options", "requests.api.patch", "requests.api.post", "requests.api.put", "requests.api.request"]


[tool.pylint.miscellaneous]
notes = ["FIXME", "XXX", "TODO"]


[tool.pylint.refactoring]
max-nested-blocks = 5
never-returning-functions = ["sys.exit", "argparse.parse_error"]


[tool.pylint.reports]
evaluation = "max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10))"
score = true


[tool.pylint.similarities]
ignore-comments = true
ignore-docstrings = true
ignore-imports = true
ignore-signatures = true
min-similarity-lines = 12


[tool.pylint.spelling]
max-spelling-suggestions = 4
spelling-ignore-comment-directives = "fmt: on,fmt: off,noqa:,noqa,nosec,isort:skip,mypy:"


[tool.pylint.typecheck]
contextmanager-decorators = ["contextlib.contextmanager"]
ignore-none = true
ignore-on-opaque-inference = true
ignored-checks-for-mixins = ["no-member", "not-async-context-manager", "not-context-manager", "attribute-defined-outside-init"]
ignored-classes = ["optparse.Values", "thread._local", "_thread._local", "argparse.Namespace"]
missing-member-hint = true
missing-member-hint-distance = 1
missing-member-max-choices = 1
mixin-class-rgx = ".*[Mm]ixin"


[tool.pylint.variables]
allow-global-unused-variables = true
callbacks = ["cb_", "_cb"]
dummy-variables-rgx = "_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"
ignored-argument-names = "_.*|^ignored_|^unused_"
redefining-builtins-modules = ["six.moves", "past.builtins", "future.builtins", "builtins", "io"]


[tool.mypy]
plugins = "numpy.typing.mypy_plugin"
warn_unused_configs = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
files = ["pyBL", "examples", "tests"]


[[tool.mypy.overrides]]
module = ["scipy.*", "matplotlib.*"]
ignore_missing_imports = true
